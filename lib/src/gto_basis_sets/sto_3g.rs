use crate::geometry::atom::Atom;
use crate::gto_basis_sets::basis::{Basis, Shell};

pub fn load_sto_3g(atoms: &[Atom]) -> Basis {
    println!("Loading STO-3G basis set");
    const MAX_ATOMIC_NUMBER: usize = 8;

    let mut shells: Vec<Vec<Shell>> = vec![Default::default(); MAX_ATOMIC_NUMBER + 1];

    // ----------------------------
    // Element #1, Hydrogen
    // ----------------------------
    shells[1] = Vec::with_capacity(1);
    // s
    shells[1].push(Shell::new(
        0,
        vec![3.42525091, 0.62391373, 0.16885540],
        vec![0.15432897, 0.53532814, 0.44463454],
    ));

    // ----------------------------
    // Element #2, Helium
    // ----------------------------
    shells[2] = Vec::with_capacity(1);
    // s
    shells[2].push(Shell::new(
        0,
        vec![6.36242139, 1.15892300, 0.31364979],
        vec![0.15432897, 0.53532814, 0.44463454],
    ));

    // ----------------------------
    // Element #3, Lithium
    // ----------------------------
    shells[3] = Vec::with_capacity(3);
    // s
    shells[3].push(Shell::new(
        0,
        vec![16.11957500, 2.93620070, 0.79465050],
        vec![0.15432897, 0.53532814, 0.44463454],
    ));
    // s
    shells[3].push(Shell::new(
        0,
        vec![0.63628970, 0.14786010, 0.04808870],
        vec![-0.09996723, 0.39951283, 0.70011547],
    ));
    // p
    shells[3].push(Shell::new(
        1,
        vec![0.63628970, 0.14786010, 0.04808870],
        vec![0.15591627, 0.60768372, 0.39195739],
    ));

    // ----------------------------
    // Element #4, Beryllium
    // ----------------------------
    shells[4] = Vec::with_capacity(3);
    // s
    shells[4].push(Shell::new(
        0,
        vec![30.16787100, 5.49511530, 1.48719270],
        vec![0.15432897, 0.53532814, 0.44463454],
    ));
    // s
    shells[4].push(Shell::new(
        0,
        vec![1.31483310, 0.30553890, 0.09937070],
        vec![-0.09996723, 0.39951283, 0.70011547],
    ));
    // p
    shells[4].push(Shell::new(
        1,
        vec![1.31483310, 0.30553890, 0.09937070],
        vec![0.15591627, 0.60768372, 0.39195739],
    ));

    // ----------------------------
    // Element #5, Boron
    // ----------------------------
    shells[5] = Vec::with_capacity(3);
    // s
    shells[5].push(Shell::new(
        0,
        vec![48.791113, 8.8873622, 2.405267],
        vec![0.15432897, 0.53532814, 0.44463454],
    ));
    // s
    shells[5].push(Shell::new(
        0,
        vec![2.2369561, 0.5198205, 0.1690618],
        vec![-0.09996723, 0.39951283, 0.70011547],
    ));
    // p
    shells[5].push(Shell::new(
        1,
        vec![2.2369561, 0.5198205, 0.1690618],
        vec![0.15591627, 0.60768372, 0.39195739],
    ));

    // ----------------------------
    // Element #6, Carbon
    // ----------------------------
    shells[6] = Vec::with_capacity(3);
    // s
    shells[6].push(Shell::new(
        0,
        vec![71.6168370000, 13.0450960000, 3.5305122000],
        vec![0.15432897, 0.53532814, 0.44463454],
    ));
    // s
    shells[6].push(Shell::new(
        0,
        vec![2.9412494000, 0.6834831000, 0.2222899000],
        vec![-0.09996723, 0.39951283, 0.70011547],
    ));
    // p
    shells[6].push(Shell::new(
        1,
        vec![2.9412494000, 0.6834831000, 0.2222899000],
        vec![0.15591627, 0.60768372, 0.39195739],
    ));

    // ----------------------------
    // Element #7, Nitrogen
    // ----------------------------
    shells[7] = Vec::with_capacity(3);
    // s
    shells[7].push(Shell::new(
        0,
        vec![99.1061690000, 18.0523120000, 4.8856602000],
        vec![0.15432897, 0.53532814, 0.44463454],
    ));
    // s
    shells[7].push(Shell::new(
        0,
        vec![3.7804559000, 0.8784966000, 0.2857144000],
        vec![-0.09996723, 0.39951283, 0.70011547],
    ));
    // p
    shells[7].push(Shell::new(
        1,
        vec![3.7804559000, 0.8784966000, 0.2857144000],
        vec![0.15591627, 0.60768372, 0.39195739],
    ));

    // ----------------------------
    // Element #8, Oxygen
    // ----------------------------
    shells[8] = Vec::with_capacity(3);
    // s
    shells[8].push(Shell::new(
        0,
        vec![130.7093200000, 23.8088610000, 6.4436083000],
        vec![0.1543289700, 0.5353281400, 0.4446345400],
    ));
    // s
    shells[8].push(Shell::new(
        0,
        vec![5.0331513000, 1.1695961000, 0.3803890000],
        vec![-0.0999672300, 0.3995128300, 0.7001154700],
    ));
    // p
    shells[8].push(Shell::new(
        1,
        vec![5.0331513000, 1.1695961000, 0.3803890000],
        vec![0.1559162700, 0.6076837200, 0.3919573900],
    ));

    // ----------------------------
    // Element #9, Fluorine
    // ----------------------------
    shells[9] = Vec::with_capacity(3);
    // s
    shells[9].push(Shell::new(
        0,
        vec![166.6791300000, 30.3608120000, 8.2168207000],
        vec![0.1543289700, 0.5353281400, 0.4446345400],
    ));
    // s
    shells[9].push(Shell::new(
        0,
        vec![6.4648032000, 1.5022812000, 0.4885885000],
        vec![-0.0999672300, 0.3995128300, 0.7001154700],
    ));
    // p
    shells[9].push(Shell::new(
        1,
        vec![6.4648032000, 1.5022812000, 0.4885885000],
        vec![0.1559162700, 0.6076837200, 0.3919573900],
    ));

    // // Basis function S
    // BG[ 10][  0].l     = 0;
    // BG[ 10][  0].ng    = 3;
    // BG[ 10][  0].a[ 0] =           207.0156100000;   BG[ 10][  0].d[ 0] =             0.1543289700;
    // BG[ 10][  0].a[ 1] =            37.7081510000;   BG[ 10][  0].d[ 1] =             0.5353281400;
    // BG[ 10][  0].a[ 2] =            10.2052970000;   BG[ 10][  0].d[ 2] =             0.4446345400;
    // // Basis function S
    // BG[ 10][  1].l     = 0;
    // BG[ 10][  1].ng    = 3;
    // BG[ 10][  1].a[ 0] =             8.2463151000;   BG[ 10][  1].d[ 0] =            -0.0999672300;
    // BG[ 10][  1].a[ 1] =             1.9162662000;   BG[ 10][  1].d[ 1] =             0.3995128300;
    // BG[ 10][  1].a[ 2] =             0.6232293000;   BG[ 10][  1].d[ 2] =             0.7001154700;
    // // Basis function P
    // BG[ 10][  2].l     = 1;
    // BG[ 10][  2].ng    = 3;
    // BG[ 10][  2].a[ 0] =             8.2463151000;   BG[ 10][  2].d[ 0] =             0.1559162700;
    // BG[ 10][  2].a[ 1] =             1.9162662000;   BG[ 10][  2].d[ 1] =             0.6076837200;
    // BG[ 10][  2].a[ 2] =             0.6232293000;   BG[ 10][  2].d[ 2] =
    // ----------------------------
    // Element #10, Neon
    // ----------------------------
    shells[10] = Vec::with_capacity(3);
    // s
    shells[10].push(Shell::new(
        0,
        vec![207.0156100000, 37.7081510000, 10.2052970000],
        vec![0.1543289700, 0.5353281400, 0.4446345400],
    ));
    // s
    shells[10].push(Shell::new(
        0,
        vec![8.2463151000, 1.9162662000, 0.6232293000],
        vec![-0.0999672300, 0.3995128300, 0.7001154700],
    ));
    // p
    shells[10].push(Shell::new(
        1,
        vec![8.2463151000, 1.9162662000, 0.6232293000],
        vec![0.1559162700, 0.6076837200, 0.3919573900],
    ));

    Basis::new(atoms, shells)
}
